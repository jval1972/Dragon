//
//  Dragon
//  A game for Windows based on a modified and improved version of the
//  DelphiDoom engine
//
//  Copyright (C) 1993-1996 by id Software, Inc.
//  Copyright (C) 2004-2021 by Jim Valavanis
//
//  This program is free software; you can redistribute it and/or
//  modify it under the terms of the GNU General Public License
//  as published by the Free Software Foundation; either version 2
//  of the License, or (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
//  02111-1307, USA.
//
//  DESCRIPTION:
//    Dynamic lights for OpenGL rendering (why not in software mode??)
//    LIGHTDEF lump parsing, light animation
//
//------------------------------------------------------------------------------
//  Site  : https://sourceforge.net/projects/dragon-game/
//------------------------------------------------------------------------------

{$I dragon.inc}

unit gl_md2;

interface

//------------------------------------------------------------------------------
//--------------------------- MD2 File Format ----------------------------------
//------------------------------------------------------------------------------

const
  // Magic number that identifies MD2 files (ASCII: 'IDP2').
  MD2_MAGIC = $32504449;

type
  TMD2_Index_List = record
    a, b, c: Integer;
    a_s, a_t,
    b_s, b_t,
    c_s, c_t: Single;
  end;
  TMD2_Index_List_Array = array[0..$FFFF] of TMD2_Index_List;
  PMD2_Index_List_Array = ^TMD2_Index_List_Array;

  TMD2_Vertex_List = record
    x, y, z: Single;
  end;
  TMD2_Vertex_List_Array = array[0..$FFFF] of TMD2_Vertex_List;
  PMD2_Vertex_List_Array = ^TMD2_Vertex_List_Array;

  TMD2_Frame_List = record
    Vertex: PMD2_Vertex_List_Array;
  end;
  TMD2_Frame_List_Array = array[0..$FFFF] of TMD2_Frame_List;
  PMD2_Frame_List_Array = ^TMD2_Frame_List_Array;

  TMD2DstVert_T = record
    s: SmallInt;
    t: SmallInt;
  end;
  TMD2DstVert_TArray = array[0..$FFFF] of TMD2DstVert_T;
  PMD2DstVert_TArray = ^TMD2DstVert_TArray;

  TMD2Triangle_T = record
    index_xyz: array[0..2] of SmallInt;
    index_st: array[0..2] of SmallInt;
  end;

  TMD2Trivertx_T = record
    v: array[0..2] of Byte;
    lightnormalindex: byte;
  end;

  PMD2AliasFrame_T = ^TMD2AliasFrame_T;
  TMD2AliasFrame_T = record
    scale: array[0..2] of Single;
    translate: array[0..2] of Single;
    name: array[0..15] of Char;
    verts: array[0..0] of TMD2Trivertx_T;
  end;

  TDmd2_T = record
    ident: Integer;
    version: Integer;

    skinWidth: Integer;
    skinHeight: Integer;
    framesize: Integer;

    num_skins: Integer;
    num_xyz: Integer;
    num_st: Integer;
    num_tris: Integer;
    num_glcmds: Integer;
    num_frames: Integer;

    ofs_skins: Integer;
    ofs_st: Integer;
    ofs_tris: Integer;
    ofs_frames: Integer;
    ofs_glcmds: Integer;
    ofs_end: Integer;
  end;

const
  NUMVERTEXNORMALS = 162;
  r_avertexnormals: array[0..NUMVERTEXNORMALS - 1, 0..2] of Single = (
    (-0.525731,  0.000000,  0.850651),
    (-0.442863,  0.238856,  0.864188),
    (-0.295242,  0.000000,  0.955423),
    (-0.309017,  0.500000,  0.809017),
    (-0.162460,  0.262866,  0.951056),
    ( 0.000000,  0.000000,  1.000000),
    ( 0.000000,  0.850651,  0.525731),
    (-0.147621,  0.716567,  0.681718),
    ( 0.147621,  0.716567,  0.681718),
    ( 0.000000,  0.525731,  0.850651),
    ( 0.309017,  0.500000,  0.809017),
    ( 0.525731,  0.000000,  0.850651),
    ( 0.295242,  0.000000,  0.955423),
    ( 0.442863,  0.238856,  0.864188),
    ( 0.162460,  0.262866,  0.951056),
    (-0.681718,  0.147621,  0.716567),
    (-0.809017,  0.309017,  0.500000),
    (-0.587785,  0.425325,  0.688191),
    (-0.850651,  0.525731,  0.000000),
    (-0.864188,  0.442863,  0.238856),
    (-0.716567,  0.681718,  0.147621),
    (-0.688191,  0.587785,  0.425325),
    (-0.500000,  0.809017,  0.309017),
    (-0.238856,  0.864188,  0.442863),
    (-0.425325,  0.688191,  0.587785),
    (-0.716567,  0.681718, -0.147621),
    (-0.500000,  0.809017, -0.309017),
    (-0.525731,  0.850651,  0.000000),
    ( 0.000000,  0.850651, -0.525731),
    (-0.238856,  0.864188, -0.442863),
    ( 0.000000,  0.955423, -0.295242),
    (-0.262866,  0.951056, -0.162460),
    ( 0.000000,  1.000000,  0.000000),
    ( 0.000000,  0.955423,  0.295242),
    (-0.262866,  0.951056,  0.162460),
    ( 0.238856,  0.864188,  0.442863),
    ( 0.262866,  0.951056,  0.162460),
    ( 0.500000,  0.809017,  0.309017),
    ( 0.238856,  0.864188, -0.442863),
    ( 0.262866,  0.951056, -0.162460),
    ( 0.500000,  0.809017, -0.309017),
    ( 0.850651,  0.525731,  0.000000),
    ( 0.716567,  0.681718,  0.147621),
    ( 0.716567,  0.681718, -0.147621),
    ( 0.525731,  0.850651,  0.000000),
    ( 0.425325,  0.688191,  0.587785),
    ( 0.864188,  0.442863,  0.238856),
    ( 0.688191,  0.587785,  0.425325),
    ( 0.809017,  0.309017,  0.500000),
    ( 0.681718,  0.147621,  0.716567),
    ( 0.587785,  0.425325,  0.688191),
    ( 0.955423,  0.295242,  0.000000),
    ( 1.000000,  0.000000,  0.000000),
    ( 0.951056,  0.162460,  0.262866),
    ( 0.850651, -0.525731,  0.000000),
    ( 0.955423, -0.295242,  0.000000),
    ( 0.864188, -0.442863,  0.238856),
    ( 0.951056, -0.162460,  0.262866),
    ( 0.809017, -0.309017,  0.500000),
    ( 0.681718, -0.147621,  0.716567),
    ( 0.850651,  0.000000,  0.525731),
    ( 0.864188,  0.442863, -0.238856),
    ( 0.809017,  0.309017, -0.500000),
    ( 0.951056,  0.162460, -0.262866),
    ( 0.525731,  0.000000, -0.850651),
    ( 0.681718,  0.147621, -0.716567),
    ( 0.681718, -0.147621, -0.716567),
    ( 0.850651,  0.000000, -0.525731),
    ( 0.809017, -0.309017, -0.500000),
    ( 0.864188, -0.442863, -0.238856),
    ( 0.951056, -0.162460, -0.262866),
    ( 0.147621,  0.716567, -0.681718),
    ( 0.309017,  0.500000, -0.809017),
    ( 0.425325,  0.688191, -0.587785),
    ( 0.442863,  0.238856, -0.864188),
    ( 0.587785,  0.425325, -0.688191),
    ( 0.688191,  0.587785, -0.425325),
    (-0.147621,  0.716567, -0.681718),
    (-0.309017,  0.500000, -0.809017),
    ( 0.000000,  0.525731, -0.850651),
    (-0.525731,  0.000000, -0.850651),
    (-0.442863,  0.238856, -0.864188),
    (-0.295242,  0.000000, -0.955423),
    (-0.162460,  0.262866, -0.951056),
    ( 0.000000,  0.000000, -1.000000),
    ( 0.295242,  0.000000, -0.955423),
    ( 0.162460,  0.262866, -0.951056),
    (-0.442863, -0.238856, -0.864188),
    (-0.309017, -0.500000, -0.809017),
    (-0.162460, -0.262866, -0.951056),
    ( 0.000000, -0.850651, -0.525731),
    (-0.147621, -0.716567, -0.681718),
    ( 0.147621, -0.716567, -0.681718),
    ( 0.000000, -0.525731, -0.850651),
    ( 0.309017, -0.500000, -0.809017),
    ( 0.442863, -0.238856, -0.864188),
    ( 0.162460, -0.262866, -0.951056),
    ( 0.238856, -0.864188, -0.442863),
    ( 0.500000, -0.809017, -0.309017),
    ( 0.425325, -0.688191, -0.587785),
    ( 0.716567, -0.681718, -0.147621),
    ( 0.688191, -0.587785, -0.425325),
    ( 0.587785, -0.425325, -0.688191),
    ( 0.000000, -0.955423, -0.295242),
    ( 0.000000, -1.000000,  0.000000),
    ( 0.262866, -0.951056, -0.162460),
    ( 0.000000, -0.850651,  0.525731),
    ( 0.000000, -0.955423,  0.295242),
    ( 0.238856, -0.864188,  0.442863),
    ( 0.262866, -0.951056,  0.162460),
    ( 0.500000, -0.809017,  0.309017),
    ( 0.716567, -0.681718,  0.147621),
    ( 0.525731, -0.850651,  0.000000),
    (-0.238856, -0.864188, -0.442863),
    (-0.500000, -0.809017, -0.309017),
    (-0.262866, -0.951056, -0.162460),
    (-0.850651, -0.525731,  0.000000),
    (-0.716567, -0.681718, -0.147621),
    (-0.716567, -0.681718,  0.147621),
    (-0.525731, -0.850651,  0.000000),
    (-0.500000, -0.809017,  0.309017),
    (-0.238856, -0.864188,  0.442863),
    (-0.262866, -0.951056,  0.162460),
    (-0.864188, -0.442863,  0.238856),
    (-0.809017, -0.309017,  0.500000),
    (-0.688191, -0.587785,  0.425325),
    (-0.681718, -0.147621,  0.716567),
    (-0.442863, -0.238856,  0.864188),
    (-0.587785, -0.425325,  0.688191),
    (-0.309017, -0.500000,  0.809017),
    (-0.147621, -0.716567,  0.681718),
    (-0.425325, -0.688191,  0.587785),
    (-0.162460, -0.262866,  0.951056),
    ( 0.442863, -0.238856,  0.864188),
    ( 0.162460, -0.262866,  0.951056),
    ( 0.309017, -0.500000,  0.809017),
    ( 0.147621, -0.716567,  0.681718),
    ( 0.000000, -0.525731,  0.850651),
    ( 0.425325, -0.688191,  0.587785),
    ( 0.587785, -0.425325,  0.688191),
    ( 0.688191, -0.587785,  0.425325),
    (-0.955423,  0.295242,  0.000000),
    (-0.951056,  0.162460,  0.262866),
    (-1.000000,  0.000000,  0.000000),
    (-0.850651,  0.000000,  0.525731),
    (-0.955423, -0.295242,  0.000000),
    (-0.951056, -0.162460,  0.262866),
    (-0.864188,  0.442863, -0.238856),
    (-0.951056,  0.162460, -0.262866),
    (-0.809017,  0.309017, -0.500000),
    (-0.864188, -0.442863, -0.238856),
    (-0.951056, -0.162460, -0.262866),
    (-0.809017, -0.309017, -0.500000),
    (-0.681718,  0.147621, -0.716567),
    (-0.681718, -0.147621, -0.716567),
    (-0.850651,  0.000000, -0.525731),
    (-0.688191,  0.587785, -0.425325),
    (-0.587785,  0.425325, -0.688191),
    (-0.425325,  0.688191, -0.587785),
    (-0.425325, -0.688191, -0.587785),
    (-0.587785, -0.425325, -0.688191),
    (-0.688191, -0.587785, -0.425325)
    );

implementation

end.

